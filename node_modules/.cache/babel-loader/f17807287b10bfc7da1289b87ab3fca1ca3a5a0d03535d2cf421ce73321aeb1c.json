{"ast":null,"code":"var _jsxFileName = \"/home/alin/face-recognition-brain/src/App.js\";\nimport React, { Component } from 'react';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Navigation from './components/navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport ParticlesBg from 'particles-bg';\nimport Clarifai from 'clarifai';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst app = new Clarifai.App({\n  apiKey: '7fdec79ebf9246a18e3514aa39c4f618'\n});\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, user and app ID, model details, and the URL\n// of the image we want as an input. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = 'YOUR_PAT_HERE';\n// Specify the correct user_id/app_id pairings\n// Since you're making inferences outside your app's scope\nconst USER_ID = 'clarifai';\nconst APP_ID = 'main';\n// Change these to whatever model and image URL you want to use\nconst MODEL_ID = 'general-image-recognition';\nconst MODEL_VERSION_ID = 'aa7f35c01e0642fda5cf400f543e7c40';\nconst IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst raw = JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": USER_ID,\n    \"app_id\": APP_ID\n  },\n  \"inputs\": [{\n    \"data\": {\n      \"image\": {\n        \"url\": IMAGE_URL\n      }\n    }\n  }]\n});\nconst requestOptions = {\n  method: 'POST',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key ' + PAT\n  },\n  body: raw\n};\n\n// NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n// https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n// this will default to the latest version_id\n\nfetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions).then(response => response.text()).then(result => console.log(result)).catch(error => console.log('error', error));\nclass App extends Component {\n  constructor() {\n    super();\n    this.onInputChange = event => {\n      console.log(event.target.value);\n    };\n    this.onButtonSubmit = () => {\n      this.setState({\n        imageUrl: this.state.input\n      });\n      app.models.predict('face-detection', this.state.input);\n      fetch(\"https://api.clarifai.com/v2/models/\" + 'face-detection' + \"/outputs\", returnClarifaiOptions(this.state.input)).then(response => response.json()).then(response => {\n        console.log('hi', response);\n        if (response) {\n          fetch('http://localhost:3000/image', {\n            method: 'put',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              id: this.state.user.id\n            })\n          }).then(response => response.json()).then(count => {\n            this.setState(Object.assign(this.state.user, {\n              entries: count\n            }));\n          });\n        }\n        this.displayFaceBox(this.calculateFaceLocation(response));\n      }).catch(err => console.log(err));\n    };\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {},\n      route: 'signin',\n      isSignedIn: false,\n      user: {\n        id: '',\n        name: '',\n        email: '',\n        entries: 0,\n        joined: ''\n      }\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(ParticlesBg, {\n        type: \"cobweb\",\n        num: 200,\n        bg: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n        onInputChange: this.onInputChange,\n        onButtonSubmit: this.onButtonSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n        imageUrl: this.state.imageUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","FaceRecognition","Navigation","Logo","ImageLinkForm","Rank","ParticlesBg","Clarifai","jsxDEV","_jsxDEV","app","App","apiKey","PAT","USER_ID","APP_ID","MODEL_ID","MODEL_VERSION_ID","IMAGE_URL","raw","JSON","stringify","requestOptions","method","headers","body","fetch","then","response","text","result","console","log","catch","error","constructor","onInputChange","event","target","value","onButtonSubmit","setState","imageUrl","state","input","models","predict","returnClarifaiOptions","json","id","user","count","Object","assign","entries","displayFaceBox","calculateFaceLocation","err","box","route","isSignedIn","name","email","joined","render","className","children","type","num","bg","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/alin/face-recognition-brain/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Navigation from './components/navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport ParticlesBg from 'particles-bg';\nimport Clarifai from 'clarifai';\nimport './App.css';\n\n\nconst app = new Clarifai.App({\n  apiKey: '7fdec79ebf9246a18e3514aa39c4f618'\n});\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, user and app ID, model details, and the URL\n    // of the image we want as an input. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = 'YOUR_PAT_HERE';\n    // Specify the correct user_id/app_id pairings\n    // Since you're making inferences outside your app's scope\n    const USER_ID = 'clarifai';       \n    const APP_ID = 'main';\n    // Change these to whatever model and image URL you want to use\n    const MODEL_ID = 'general-image-recognition';\n    const MODEL_VERSION_ID = 'aa7f35c01e0642fda5cf400f543e7c40';    \n    const IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"inputs\": [\n            {\n                \"data\": {\n                    \"image\": {\n                        \"url\": IMAGE_URL\n                    }\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    // NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n    // https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n    // this will default to the latest version_id\n\n    fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {},\n      route: 'signin',\n      isSignedIn: false,\n      user: {\n        id: '',\n        name: '',\n        email: '',\n        entries: 0,\n        joined: ''\n      }\n    }\n  }\n\n  onInputChange = (event) => {\n    console.log(event.target.value);\n  }\n\n  onButtonSubmit = () => {\n   this.setState({imageUrl: this.state.input});\n\n  app.models.predict('face-detection', this.state.input)\n  fetch(\"https://api.clarifai.com/v2/models/\" + 'face-detection' + \"/outputs\", returnClarifaiOptions(this.state.input))\n  .then(response => response.json())\n  .then(response => {\n    console.log('hi', response)\n    if (response) {\n      fetch('http://localhost:3000/image', {\n        method: 'put',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({\n          id: this.state.user.id\n        })\n      })\n        .then(response => response.json())\n        .then(count => {\n          this.setState(Object.assign(this.state.user, { entries: count}))\n        })\n\n    }\n    this.displayFaceBox(this.calculateFaceLocation(response))\n  })\n  .catch(err => console.log(err));\n}\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ParticlesBg type=\"cobweb\" num={200} bg={true} />\n        <Navigation />\n        <Logo />\n        <Rank />\n        <ImageLinkForm\n        onInputChange={this.onInputChange}\n        onButtonSubmit={this.onButtonSubmit}/>\n        <FaceRecognition imageUrl={this.state.imageUrl}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,eAAe,MAAM,8CAA8C;AAC1E,OAAOC,UAAU,MAAM,oCAAoC;AAC3D,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,aAAa,MAAM,0CAA0C;AACpE,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,WAAW,MAAM,cAAc;AACtC,OAAOC,QAAQ,MAAM,UAAU;AAC/B,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGnB,MAAMC,GAAG,GAAG,IAAIH,QAAQ,CAACI,GAAG,CAAC;EAC3BC,MAAM,EAAE;AACV,CAAC,CAAC;;AAEF;AACI;AACA;AACA;;AAEA;AACA,MAAMC,GAAG,GAAG,eAAe;AAC3B;AACA;AACA,MAAMC,OAAO,GAAG,UAAU;AAC1B,MAAMC,MAAM,GAAG,MAAM;AACrB;AACA,MAAMC,QAAQ,GAAG,2BAA2B;AAC5C,MAAMC,gBAAgB,GAAG,kCAAkC;AAC3D,MAAMC,SAAS,GAAG,8CAA8C;;AAEhE;AACA;AACA;;AAEA,MAAMC,GAAG,GAAGC,IAAI,CAACC,SAAS,CAAC;EACvB,aAAa,EAAE;IACX,SAAS,EAAEP,OAAO;IAClB,QAAQ,EAAEC;EACd,CAAC;EACD,QAAQ,EAAE,CACN;IACI,MAAM,EAAE;MACJ,OAAO,EAAE;QACL,KAAK,EAAEG;MACX;IACJ;EACJ,CAAC;AAET,CAAC,CAAC;AAEF,MAAMI,cAAc,GAAG;EACnBC,MAAM,EAAE,MAAM;EACdC,OAAO,EAAE;IACL,QAAQ,EAAE,kBAAkB;IAC5B,eAAe,EAAE,MAAM,GAAGX;EAC9B,CAAC;EACDY,IAAI,EAAEN;AACV,CAAC;;AAED;AACA;AACA;;AAEAO,KAAK,CAAC,qCAAqC,GAAGV,QAAQ,GAAG,YAAY,GAAGC,gBAAgB,GAAG,UAAU,EAAEK,cAAc,CAAC,CACjHK,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACjCF,IAAI,CAACG,MAAM,IAAIC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC,CAAC,CACnCG,KAAK,CAACC,KAAK,IAAIH,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEE,KAAK,CAAC,CAAC;AAEpD,MAAMvB,GAAG,SAASX,SAAS,CAAC;EAC1BmC,WAAWA,CAAA,EAAG;IACZ,KAAK,EAAE;IAAC,KAiBVC,aAAa,GAAIC,KAAK,IAAK;MACzBN,OAAO,CAACC,GAAG,CAACK,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;IACjC,CAAC;IAAA,KAEDC,cAAc,GAAG,MAAM;MACtB,IAAI,CAACC,QAAQ,CAAC;QAACC,QAAQ,EAAE,IAAI,CAACC,KAAK,CAACC;MAAK,CAAC,CAAC;MAE5ClC,GAAG,CAACmC,MAAM,CAACC,OAAO,CAAC,gBAAgB,EAAE,IAAI,CAACH,KAAK,CAACC,KAAK,CAAC;MACtDlB,KAAK,CAAC,qCAAqC,GAAG,gBAAgB,GAAG,UAAU,EAAEqB,qBAAqB,CAAC,IAAI,CAACJ,KAAK,CAACC,KAAK,CAAC,CAAC,CACpHjB,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACoB,IAAI,EAAE,CAAC,CACjCrB,IAAI,CAACC,QAAQ,IAAI;QAChBG,OAAO,CAACC,GAAG,CAAC,IAAI,EAAEJ,QAAQ,CAAC;QAC3B,IAAIA,QAAQ,EAAE;UACZF,KAAK,CAAC,6BAA6B,EAAE;YACnCH,MAAM,EAAE,KAAK;YACbC,OAAO,EAAE;cAAC,cAAc,EAAE;YAAkB,CAAC;YAC7CC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAAC;cACnB4B,EAAE,EAAE,IAAI,CAACN,KAAK,CAACO,IAAI,CAACD;YACtB,CAAC;UACH,CAAC,CAAC,CACCtB,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACoB,IAAI,EAAE,CAAC,CACjCrB,IAAI,CAACwB,KAAK,IAAI;YACb,IAAI,CAACV,QAAQ,CAACW,MAAM,CAACC,MAAM,CAAC,IAAI,CAACV,KAAK,CAACO,IAAI,EAAE;cAAEI,OAAO,EAAEH;YAAK,CAAC,CAAC,CAAC;UAClE,CAAC,CAAC;QAEN;QACA,IAAI,CAACI,cAAc,CAAC,IAAI,CAACC,qBAAqB,CAAC5B,QAAQ,CAAC,CAAC;MAC3D,CAAC,CAAC,CACDK,KAAK,CAACwB,GAAG,IAAI1B,OAAO,CAACC,GAAG,CAACyB,GAAG,CAAC,CAAC;IACjC,CAAC;IA7CG,IAAI,CAACd,KAAK,GAAG;MACXC,KAAK,EAAE,EAAE;MACTF,QAAQ,EAAE,EAAE;MACZgB,GAAG,EAAE,CAAC,CAAC;MACPC,KAAK,EAAE,QAAQ;MACfC,UAAU,EAAE,KAAK;MACjBV,IAAI,EAAE;QACJD,EAAE,EAAE,EAAE;QACNY,IAAI,EAAE,EAAE;QACRC,KAAK,EAAE,EAAE;QACTR,OAAO,EAAE,CAAC;QACVS,MAAM,EAAE;MACV;IACF,CAAC;EACH;EAiCAC,MAAMA,CAAA,EAAG;IACP,oBACEvD,OAAA;MAAKwD,SAAS,EAAC,KAAK;MAAAC,QAAA,gBAClBzD,OAAA,CAACH,WAAW;QAAC6D,IAAI,EAAC,QAAQ;QAACC,GAAG,EAAE,GAAI;QAACC,EAAE,EAAE;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,eACjDhE,OAAA,CAACP,UAAU;QAAAoE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,eACdhE,OAAA,CAACN,IAAI;QAAAmE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,eACRhE,OAAA,CAACJ,IAAI;QAAAiE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,eACRhE,OAAA,CAACL,aAAa;QACdgC,aAAa,EAAE,IAAI,CAACA,aAAc;QAClCI,cAAc,EAAE,IAAI,CAACA;MAAe;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAE,eACtChE,OAAA,CAACR,eAAe;QAACyC,QAAQ,EAAE,IAAI,CAACC,KAAK,CAACD;MAAS;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAE;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAC7C;EAEV;AACF;AAEA,eAAe9D,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}